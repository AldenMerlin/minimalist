extends ../../hotsite/template

block content
  nav.header
    a.logotype(href='/') minimalist
    a number


  .showcase.mn-layout-fullscreen.mn-layout-centered
    .demo.mn-layout-container
      h1 mn-number

      .mn-form.mn-layout-column.mn-layout-sm-row
        mn-number.flex(placeholder='integer number')
        mn-number.flex(placeholder='float with precision 3' precision='3')
        mn-number.flex(placeholder='money' currency)
        mn-number.flex(placeholder='percentage' percentage)

  .docs.mn-layout-container
    section
      h2 install
      mn-code.
        npm install --save minimalist
      p and bundle it with your preferred tool.

    section
      h2 usage
      p import components in your .js file
      mn-code.
        import {number} from 'minimalist'
      p finally in your html, you can use the tag <code>&lt;mn-number&gt;</code>, e.g.

      mn-code.
        &lt;mn-number&gt;&lt;/mn-number&gt;

    section
      h2 Attributes
      p The complete list of attributes supported is the following:

    section
      h3: a(name='placeholder' href='number.html#placeholder') placeholder
      p The title of input, indicate what content the user needs write.

      mn-code.
        &lt;mn-number placeholder="Type a number"&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(placeholder='Type a number')

    section
      h3: a(name='name' href='number.html#name') name
      p The name is the identifier of input, used to interact with input in javascript

      mn-code.
        // html
        &lt;form id="test"&gt;
          &lt;mn-number placeholder="age" value="27" name="age"&gt;&lt;/mn-number&gt;
        &lt;/form&gt;

        // js
        console.log(test.age) // return the reference to input
        console.log(test.age.value) // return the value on input

        console.log(test.data) // will return

        {
          age: 27,
        }
      .mn-card.padding
        mn-form#test: mn-number(placeholder='age' value='27' name='age')

    section
      h3: a(name='value' href='number.html#value') value
      p Used to set the initial value of mn-number, e.g.
      mn-code.
        &lt;mn-number value="10"&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(value='10')

      mn-code.
        // you can use value as property in javascript, e.g.
        const input = document.querySelector('mn-number')
        input.value = 27
        console.log(input.value) // the value always be a number, or undefined

    section
      h3: a(name='multiple' href='number.html#multiple') multiple
      p Allow to user type multiple value on input.
      mn-code.
        &lt;mn-number multiple&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(placeholder='numbers' multiple value='[10, 20]')
      mn-code.
        const input = document.querySelector('mn-number')
        console.log(input.value) // the value of input multiple always be an array

    section
      h3: a(name='autofocus' href='number.html#autofocus') autofocus
      p Used to automatically focus on input once time page opens.

      mn-code.
        &lt;mn-number autofocus&gt;&lt;/mn-number&gt;

    section
      h3: a(name='required' href='number.html#required') required
      p Set input as required, so user cannot submit form without fill it correctly

      mn-code.
        &lt;mn-number required&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-form.submitted: mn-number.invalid.required(placeholder='number' required)

    section
      h3: a(name='readonly' href='number.html#readonly') readonly
      p Sets input as read only, so user cannot change the value, but can navigate to them using keyboard and copy.

      mn-code.
        &lt;mn-number readonly&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(placeholder='number' value='10' readonly)

    section
      h3: a(name='disabled' href='number.html#disabled') disabled
      p Sets input as disabled, so user cannot navigate to them, but can copy.

      mn-code.
        &lt;mn-number disabled&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(placeholder='number' value='10' disabled)

    section
      h3: a(name='precision' href='number.html#precision') precision
      p Set a mask to number, showing that with precision defined

      mn-code.
        &lt;mn-number precision='3' value='10'&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(placeholder='number' value='10' precision='3')

    section
      h3: a(name='currency' href='number.html#currency') currency
      p Set a currency mask to number, with precision 2 by default.

      mn-code.
        &lt;mn-number currency value='10'&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(placeholder='number' value='10' currency)


      mn-code.
        //To change the currency symbol, just use a css variable, e.g.

        .mn-number {
          --currency-symbol: 'R$'
        }
      .mn-card.padding
        style.
          .mn-number.real {--currency-symbol: 'R$'}
        mn-number.real(placeholder='number' value='10' currency)

    section
      h3: a(name='percentage' href='number.html#percentage') percentage
      p Set a percentage mask to number, without precision by default.

      mn-code.
        &lt;mn-number percentage value='1'&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-number(placeholder='number' value='1' percentage)

    section
      h3: a(name='max' href='number.html#max') max
      p Define a max value to input.

      mn-code.
        &lt;mn-number max='5'&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-form.submitted: mn-number.invalid.max(placeholder='number' max='5' value='6')

    section
      h3: a(name='min' href='number.html#min') min
      p Define a min value to input.

      mn-code.
        &lt;mn-number min='5'&gt;&lt;/mn-number&gt;
      .mn-card.padding
        mn-form.submitted: mn-number.invalid.min(placeholder='number' min='0' value='-1')


